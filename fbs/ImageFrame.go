// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ImageFrameT struct {
	Id        int32  `json:"id"`
	Data      []byte `json:"data"`
	Timestamp string `json:"timestamp"`
	CameraId  string `json:"camera_id"`
}

func (t *ImageFrameT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	dataOffset := flatbuffers.UOffsetT(0)
	if t.Data != nil {
		dataOffset = builder.CreateByteString(t.Data)
	}
	timestampOffset := flatbuffers.UOffsetT(0)
	if t.Timestamp != "" {
		timestampOffset = builder.CreateString(t.Timestamp)
	}
	cameraIdOffset := flatbuffers.UOffsetT(0)
	if t.CameraId != "" {
		cameraIdOffset = builder.CreateString(t.CameraId)
	}
	ImageFrameStart(builder)
	ImageFrameAddId(builder, t.Id)
	ImageFrameAddData(builder, dataOffset)
	ImageFrameAddTimestamp(builder, timestampOffset)
	ImageFrameAddCameraId(builder, cameraIdOffset)
	return ImageFrameEnd(builder)
}

func (rcv *ImageFrame) UnPackTo(t *ImageFrameT) {
	t.Id = rcv.Id()
	t.Data = rcv.DataBytes()
	t.Timestamp = string(rcv.Timestamp())
	t.CameraId = string(rcv.CameraId())
}

func (rcv *ImageFrame) UnPack() *ImageFrameT {
	if rcv == nil {
		return nil
	}
	t := &ImageFrameT{}
	rcv.UnPackTo(t)
	return t
}

type ImageFrame struct {
	_tab flatbuffers.Table
}

func GetRootAsImageFrame(buf []byte, offset flatbuffers.UOffsetT) *ImageFrame {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ImageFrame{}
	x.Init(buf, n+offset)
	return x
}

func FinishImageFrameBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsImageFrame(buf []byte, offset flatbuffers.UOffsetT) *ImageFrame {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ImageFrame{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedImageFrameBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ImageFrame) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ImageFrame) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ImageFrame) Id() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ImageFrame) MutateId(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *ImageFrame) Data(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *ImageFrame) DataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ImageFrame) DataBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ImageFrame) MutateData(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *ImageFrame) Timestamp() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ImageFrame) CameraId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func ImageFrameStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func ImageFrameAddId(builder *flatbuffers.Builder, id int32) {
	builder.PrependInt32Slot(0, id, 0)
}
func ImageFrameAddData(builder *flatbuffers.Builder, data flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(data), 0)
}
func ImageFrameStartDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func ImageFrameAddTimestamp(builder *flatbuffers.Builder, timestamp flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(timestamp), 0)
}
func ImageFrameAddCameraId(builder *flatbuffers.Builder, cameraId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(cameraId), 0)
}
func ImageFrameEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
